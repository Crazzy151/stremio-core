use crate::types::resource::{MetaItem, MetaItemBehaviorHints, MetaItemPreview, PosterShape};
use crate::unit_tests::serde::default_tokens_ext::DefaultTokens;
use chrono::prelude::TimeZone;
use chrono::Utc;
use serde_test::{assert_de_tokens, assert_tokens, Token};

#[test]
fn meta_item() {
    assert_tokens(
        &vec![
            MetaItem {
                preview: MetaItemPreview {
                    id: "id".to_owned(),
                    r#type: "type".to_owned(),
                    name: "name".to_owned(),
                    poster: Some("poster".to_owned()),
                    background: Some("background".to_owned()),
                    logo: Some("logo".to_owned()),
                    description: Some("description".to_owned()),
                    release_info: Some("release_info".to_owned()),
                    runtime: Some("runtime".to_owned()),
                    released: Some(Utc.ymd(2020, 1, 1).and_hms_milli(0, 0, 0, 0)),
                    poster_shape: PosterShape::default(),
                    links: vec![],
                    trailer_streams: vec![],
                    behavior_hints: MetaItemBehaviorHints::default(),
                },
                videos: vec![],
            },
            MetaItem {
                preview: MetaItemPreview {
                    id: "id".to_owned(),
                    r#type: "type".to_owned(),
                    name: "name".to_owned(),
                    poster: None,
                    background: None,
                    logo: None,
                    description: None,
                    release_info: None,
                    runtime: None,
                    released: None,
                    poster_shape: PosterShape::default(),
                    links: vec![],
                    trailer_streams: vec![],
                    behavior_hints: MetaItemBehaviorHints::default(),
                },
                videos: vec![],
            },
        ],
        &[
            vec![
                Token::Seq { len: Some(2) },
                Token::Map { len: None },
                Token::Str("id"),
                Token::Str("id"),
                Token::Str("type"),
                Token::Str("type"),
                Token::Str("name"),
                Token::Str("name"),
                Token::Str("poster"),
                Token::Some,
                Token::Str("poster"),
                Token::Str("background"),
                Token::Some,
                Token::Str("background"),
                Token::Str("logo"),
                Token::Some,
                Token::Str("logo"),
                Token::Str("description"),
                Token::Some,
                Token::Str("description"),
                Token::Str("releaseInfo"),
                Token::Some,
                Token::Str("release_info"),
                Token::Str("runtime"),
                Token::Some,
                Token::Str("runtime"),
                Token::Str("released"),
                Token::Some,
                Token::Str("2020-01-01T00:00:00Z"),
                Token::Str("posterShape"),
            ],
            PosterShape::default_tokens(),
            vec![
                Token::Str("links"),
                Token::Seq { len: Some(0) },
                Token::SeqEnd,
                Token::Str("trailerStreams"),
                Token::Seq { len: Some(0) },
                Token::SeqEnd,
                Token::Str("behaviorHints"),
            ],
            MetaItemBehaviorHints::default_tokens(),
            vec![
                Token::Str("videos"),
                Token::Seq { len: Some(0) },
                Token::SeqEnd,
                Token::MapEnd,
            ],
            vec![
                Token::Map { len: None },
                Token::Str("id"),
                Token::Str("id"),
                Token::Str("type"),
                Token::Str("type"),
                Token::Str("name"),
                Token::Str("name"),
                Token::Str("poster"),
                Token::None,
                Token::Str("background"),
                Token::None,
                Token::Str("logo"),
                Token::None,
                Token::Str("description"),
                Token::None,
                Token::Str("releaseInfo"),
                Token::None,
                Token::Str("runtime"),
                Token::None,
                Token::Str("released"),
                Token::None,
                Token::Str("posterShape"),
            ],
            PosterShape::default_tokens(),
            vec![
                Token::Str("links"),
                Token::Seq { len: Some(0) },
                Token::SeqEnd,
                Token::Str("trailerStreams"),
                Token::Seq { len: Some(0) },
                Token::SeqEnd,
                Token::Str("behaviorHints"),
            ],
            MetaItemBehaviorHints::default_tokens(),
            vec![
                Token::Str("videos"),
                Token::Seq { len: Some(0) },
                Token::SeqEnd,
                Token::MapEnd,
                Token::SeqEnd,
            ],
        ]
        .concat(),
    );
    assert_de_tokens(
        &MetaItem {
            preview: MetaItemPreview {
                id: "id".to_owned(),
                r#type: "type".to_owned(),
                name: "".to_owned(),
                poster: None,
                background: None,
                logo: None,
                description: None,
                release_info: None,
                runtime: None,
                released: None,
                poster_shape: PosterShape::default(),
                links: vec![],
                trailer_streams: vec![],
                behavior_hints: MetaItemBehaviorHints::default(),
            },
            videos: vec![],
        },
        &[
            Token::Struct {
                name: "MetaItem",
                len: 2,
            },
            Token::Str("id"),
            Token::Str("id"),
            Token::Str("type"),
            Token::Str("type"),
            Token::StructEnd,
        ],
    );
}
